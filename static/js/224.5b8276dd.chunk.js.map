{"version":3,"file":"static/js/224.5b8276dd.chunk.js","mappings":"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","sources":["redux/selectors.js","webpack://react-homework-template/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","components/Form/Form.jsx","components/Filter/Filter.jsx","components/DeleteContact/DeleteContact.jsx","components/EditContact/EditContact.jsx","components/ContactsList/ContactsList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\nexport const selectStatus = state => state.contacts.status;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(normalizedFilter);\n    });\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"loaderContainer\":\"Loader_loaderContainer__UDDYf\"};","import css from './Loader.module.css'\nimport { ThreeDots } from 'react-loader-spinner';\nconst Loader = () => {\n  return (\n    <div className={css.loaderContainer}>\n      <ThreeDots\n        height=\"80\"\n        width=\"80\"\n        radius=\"9\"\n        color='#E53E3E'\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </div>\n  );\n};\nexport default Loader;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { STATUS } from 'constants/constants';\nimport { addContactsThunk } from 'redux/contacts.thunk';\nimport { selectStatus } from 'redux/selectors';\nimport Loader from 'components/Loader/Loader';\n\nimport { FormLabel, Input, Button, Stack } from '@chakra-ui/react';\n\nconst Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const status = useSelector(selectStatus);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(addContactsThunk({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  if (status === STATUS.idle || status === STATUS.success) {\n    return (\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <Stack minW='300px'  mr=\"auto\" ml=\"auto\">\n          <FormLabel mr='0px'>\n            Name\n            <Input\n            minW='300px'\n              pl=\"1.5rem\"\n              _focusVisible={{\n                borderColor: 'red.200',\n                boxShadow: '0px 1px 0px 0px #fbd38d',\n              }}\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={handleChange}\n              placeholder=\"Enter name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only  letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </FormLabel>\n          <FormLabel>\n            Number\n            <Input\n            minW='300px'\n              pl=\"1.5rem\"\n              _focusVisible={{\n                borderColor: 'red.200',\n                boxShadow: '0px 1px 0px 0px #fbd38d',\n              }}\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={handleChange}\n              placeholder=\"Enter number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </FormLabel>\n          <Button type=\"submit\" colorScheme=\"red\" size=\"md\"  m={'auto'} >\n            Add new contact\n          </Button>\n        </Stack>\n      </form>\n    );\n  }\n  if (status === STATUS.error) {\n    return <p>Something went wrong ...</p>;\n  }\n  if (status === STATUS.loading) {\n    return <Loader />;\n  }\n};\nexport default Form;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nimport { FormLabel, Input, Stack } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <Stack minW=\"300px\" mr=\"auto\" ml=\"auto\">\n      <FormLabel>\n        Find contacts by name\n        <Input\n         minW='300px'\n          pl=\"1.5rem\"\n          _focusVisible={{\n            borderColor: 'red.200',\n            boxShadow: '0px 1px 0px 0px #fbd38d',\n          }}\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={e => dispatch(filterContacts(e.target.value))}\n          placeholder=\"Enter name\"\n        />\n      </FormLabel>\n    </Stack>\n  );\n};\n\nexport default Filter;\n","import { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteContactByIdThunk } from 'redux/contacts.thunk';\nimport { STATUS } from 'constants/constants';\nimport { selectStatus } from 'redux/selectors';\nimport Loader from 'components/Loader/Loader';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalCloseButton,\n  Button,\n  Box\n} from '@chakra-ui/react';\n\nconst DeleteContact = ({ id, onClose, isOpen, reset }) => {\n  const dispatch = useDispatch();\n  const status = useSelector(selectStatus);\n  const deleteContact = id => {\n    dispatch(deleteContactByIdThunk(id));\n    onClose();\n    reset();\n  };\n  const onCloseModal = () => {\n    onClose();\n    reset();\n  };\n  if (status === STATUS.success) {\n    return (\n      <Modal size='xs' isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent display='flex' alignItems='center'>\n          <ModalHeader>Delete the contact?</ModalHeader>\n          <ModalCloseButton />\n          <ModalFooter   >\n           <Box as='ul' display='flex' flexDirection='row'>\n           <li>\n              <Button size=\"md\" colorScheme=\"red\" mr={5} onClick={() => deleteContact(id)}>OK</Button>\n            </li>\n            <li>\n              <Button size=\"md\" colorScheme=\"red\" onClick={onCloseModal}>Cancel</Button>\n            </li>\n           </Box>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    );\n  }\n  if (status === STATUS.error) {\n    return <p>Something went wrong ...</p>;\n  }\n  if (status === STATUS.loading) {\n    return <Loader />;\n  }\n};\n\nDeleteContact.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n  reset: PropTypes.func,\n  id: PropTypes.string.isRequired\n};\n\nexport default DeleteContact;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { refreshContactByIdThunk } from 'redux/contacts.thunk';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { STATUS } from 'constants/constants';\nimport { selectStatus } from 'redux/selectors';\nimport Loader from 'components/Loader/Loader';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  Input,\n  FormLabel,\n  ModalHeader,\n  FormControl,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n} from '@chakra-ui/react';\n\nconst EditContact = ({ id, name, number, onClose, isOpen, reset }) => {\n  const dispatch = useDispatch();\n  const status = useSelector(selectStatus);\n  const [newName, setNewName] = useState(name);\n  const [newNumber, setNewNumber] = useState(number);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'newName':\n        setNewName(value);\n        break;\n      case 'newNumber':\n        setNewNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(refreshContactByIdThunk({ id, name: newName, number: newNumber }));\n    onClose();\n    reset();\n  };\n  const onCloseModal = () => {\n    onClose();\n    reset();\n  };\n  if (status === STATUS.success) {\n    return (\n      <Modal size=\"xs\" isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent display=\"flex\" alignItems=\"center\">\n          <ModalHeader>Edit Contact</ModalHeader>\n          <ModalCloseButton />\n          <form onSubmit={handleSubmit}>\n            <ModalBody pb={6}>\n              <FormControl>\n                <FormLabel>\n                  Name\n                  <Input\n                    pl=\"1.5rem\"\n                    _focusVisible={{\n                      borderColor: 'red.200',\n                      boxShadow: '0px 1px 0px 0px #fbd38d',\n                    }}\n                    type=\"text\"\n                    name=\"newName\"\n                    value={newName}\n                    onChange={handleChange}\n                    placeholder=\"Enter name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                  />\n                </FormLabel>\n              </FormControl>\n              <FormControl>\n                <FormLabel>\n                  Number\n                  <Input\n                    pl=\"1.5rem\"\n                    _focusVisible={{\n                      borderColor: 'red.200',\n                      boxShadow: '0px 1px 0px 0px #fbd38d',\n                    }}\n                    type=\"tel\"\n                    name=\"newNumber\"\n                    value={newNumber}\n                    onChange={handleChange}\n                    placeholder=\"Enter number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                  />\n                </FormLabel>\n              </FormControl>\n            </ModalBody>\n            <ModalFooter>\n              <Button\n                size=\"md\"\n                colorScheme=\"red\"\n                type=\"submit\"\n                ml=\"auto\"\n                mr={3}\n              >\n                OK\n              </Button>\n              <Button\n                size=\"md\"\n                colorScheme=\"red\"\n                mr=\"auto\"\n                type=\"button\"\n                onClick={onCloseModal}\n              >\n                Cancel\n              </Button>\n            </ModalFooter>\n          </form>\n        </ModalContent>\n      </Modal>\n    );\n  }\n  if (status === STATUS.error) {\n    return <p>Something went wrong ...</p>;\n  }\n  if (status === STATUS.loading) {\n    return <Loader />;\n  }\n};\n\nEditContact.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n  reset: PropTypes.func,\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default EditContact;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport Filter from 'components/Filter';\nimport { selectVisibleContacts, selectStatus } from 'redux/selectors';\nimport { getContactsThunk } from 'redux/contacts.thunk';\n\nimport Loader from 'components/Loader/Loader';\n\nimport DeleteContact from 'components/DeleteContact';\nimport EditContact from 'components/EditContact';\nimport { STATUS } from 'constants/constants';\n\nimport {\n  ButtonGroup,\n  IconButton,\n  Box,\n  Text,\n  useDisclosure,\n} from '@chakra-ui/react';\n\nimport { DeleteIcon, EditIcon } from '@chakra-ui/icons';\n\nconst ContactsList = () => {\n  const [deleteContactId, setDeleteContactId] = useState('');\n  const [refreshContactId, setRefreshContactId] = useState('');\n  const [contactName, setContactName] = useState('');\n  const [contactNumber, setContactNumber] = useState('');\n  const dispatch = useDispatch();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const status = useSelector(selectStatus);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n  const resetId = ()=>{\n    setDeleteContactId('');\n    setRefreshContactId('');\n  }\n  if (status === STATUS.success) {\n    return (\n      <>\n        <Filter />\n        <Box as=\"ul\" minW=\"300px\" mr=\"auto\" ml=\"auto\">\n          {visibleContacts.map(({ id, name, number }) => (\n            <Box as=\"li\" display=\"flex\" alignItems=\"center\" mb={2} key={id}>\n              <Text fontSize=\"lg\" fontWeight=\"500\">\n                {name[0].toUpperCase() + name.substring(1)} :{' '}\n              </Text>\n              <Text fontSize=\"lg\" ml={2} mr='auto'>\n                {number}\n              </Text>\n              <ButtonGroup  mr={3}>\n                <IconButton\n                  colorScheme=\"red\"\n                  aria-label=\"Edit contact\"\n                  icon={<EditIcon size=\"md\" boxSize={4} />}\n                  onClick={() => {\n                    dispatch(() => {\n                      setRefreshContactId(id);\n                      onOpen();\n                      setContactName(name);\n                      setContactNumber(number);\n                    });\n                  }}\n                />\n                <IconButton\n                  colorScheme=\"red\"\n                  aria-label=\"Delete contact\"\n                  icon={<DeleteIcon size=\"md\" boxSize={4} />}\n                  onClick={() => {\n                    dispatch(() => {\n                      setDeleteContactId(id);\n                      onOpen();\n                    });\n                  }}\n                />\n              </ButtonGroup>\n            </Box>\n          ))}\n        </Box>\n\n        {isOpen && deleteContactId && (\n          <DeleteContact\n            id={deleteContactId}\n            isOpen={isOpen}\n            onClose={onClose}\n            reset={resetId}\n          />\n        )}\n        {isOpen && refreshContactId && (\n          <EditContact\n            id={refreshContactId}\n            name={contactName}\n            number={contactNumber}\n            isOpen={isOpen}\n            onClose={onClose}\n            reset={resetId}\n          />\n        )}\n      </>\n    );\n  }\n\n  if (status === STATUS.error) {\n    return <p>Something went wrong ...</p>;\n  }\n  if (status === STATUS.loading) {\n    return <Loader />;\n  }\n};\n\nexport default ContactsList;\n","import Form from 'components/Form';\nimport ContactsList from 'components/ContactsList';\n\nimport {\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Container,\n} from '@chakra-ui/react';\nconst ContactsPage = () => {\n  return (\n    <Container\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      maxW=\"md\"\n      mr=\"auto\"\n      ml=\"auto\"\n      p={3}\n    >\n      <Tabs>\n        <TabList>\n          <Tab p={3}  size=\"md\" mr={1} borderRadius={'12px'} _selected={{ color: 'white', bg: 'red.500' }} _hover={{ bg: 'red.400', color: 'white' }} fontSize='md' fontWeight='500'>\n            Add Contact\n          </Tab>\n          <Tab p={3}  size=\"md\" borderRadius={'12px'} _selected={{ color: 'white', bg: 'red.500' }} _hover={{ bg: 'red.400', color: 'white' }} fontSize='md' fontWeight='500'>\n            All Contacts\n          </Tab>\n        </TabList>\n        <TabPanels>\n          <TabPanel>\n            <Form />\n          </TabPanel>\n          <TabPanel>\n            <ContactsList />\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectFilter","state","filter","selectStatus","contacts","status","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","className","css","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","target","value","STATUS","onSubmit","preventDefault","addContactsThunk","autoComplete","minW","mr","ml","I","pl","_focusVisible","borderColor","boxShadow","type","onChange","placeholder","pattern","title","required","colorScheme","size","m","filterContacts","id","onClose","isOpen","reset","display","alignItems","as","flexDirection","onClick","deleteContactByIdThunk","deleteContact","newName","setNewName","newNumber","setNewNumber","refreshContactByIdThunk","pb","deleteContactId","setDeleteContactId","refreshContactId","setRefreshContactId","contactName","setContactName","contactNumber","setContactNumber","useDisclosure","onOpen","visibleContacts","useEffect","getContactsThunk","resetId","map","mb","fontSize","fontWeight","toUpperCase","substring","icon","boxSize","justifyContent","maxW","p","borderRadius","_selected","bg","_hover"],"sourceRoot":""}